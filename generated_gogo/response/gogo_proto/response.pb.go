// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gogo_proto/response.proto

package response

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProductResponse struct {
	ProductId       int64            `protobuf:"varint,1,req,name=ProductId,json=productId" json:"ProductId"`
	Description     *string          `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Name            string           `protobuf:"bytes,3,req,name=name" json:"name"`
	IsSellable      bool             `protobuf:"varint,4,req,name=isSellable" json:"isSellable"`
	Sellers         []Seller         `protobuf:"bytes,5,rep,name=sellers" json:"sellers"`
	SellerPriceInfo map[string]int32 `protobuf:"bytes,6,rep,name=sellerPriceInfo" json:"sellerPriceInfo" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *ProductResponse) Reset()         { *m = ProductResponse{} }
func (m *ProductResponse) String() string { return proto.CompactTextString(m) }
func (*ProductResponse) ProtoMessage()    {}
func (*ProductResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d06547307c44d5, []int{0}
}
func (m *ProductResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductResponse.Merge(m, src)
}
func (m *ProductResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProductResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProductResponse proto.InternalMessageInfo

func (m *ProductResponse) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *ProductResponse) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *ProductResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProductResponse) GetIsSellable() bool {
	if m != nil {
		return m.IsSellable
	}
	return false
}

func (m *ProductResponse) GetSellers() []Seller {
	if m != nil {
		return m.Sellers
	}
	return nil
}

func (m *ProductResponse) GetSellerPriceInfo() map[string]int32 {
	if m != nil {
		return m.SellerPriceInfo
	}
	return nil
}

type Seller struct {
	SellerId   int64  `protobuf:"varint,1,req,name=sellerId" json:"sellerId"`
	SellerName string `protobuf:"bytes,2,req,name=sellerName" json:"sellerName"`
	Price      int32  `protobuf:"varint,3,req,name=price" json:"price"`
}

func (m *Seller) Reset()         { *m = Seller{} }
func (m *Seller) String() string { return proto.CompactTextString(m) }
func (*Seller) ProtoMessage()    {}
func (*Seller) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d06547307c44d5, []int{1}
}
func (m *Seller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Seller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Seller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Seller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Seller.Merge(m, src)
}
func (m *Seller) XXX_Size() int {
	return m.Size()
}
func (m *Seller) XXX_DiscardUnknown() {
	xxx_messageInfo_Seller.DiscardUnknown(m)
}

var xxx_messageInfo_Seller proto.InternalMessageInfo

func (m *Seller) GetSellerId() int64 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

func (m *Seller) GetSellerName() string {
	if m != nil {
		return m.SellerName
	}
	return ""
}

func (m *Seller) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

var E_Nullable = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         65001,
	Name:          "nullable",
	Tag:           "varint,65001,opt,name=nullable",
	Filename:      "gogo_proto/response.proto",
}

func init() {
	proto.RegisterType((*ProductResponse)(nil), "ProductResponse")
	proto.RegisterMapType((map[string]int32)(nil), "ProductResponse.SellerPriceInfoEntry")
	proto.RegisterType((*Seller)(nil), "Seller")
	proto.RegisterExtension(E_Nullable)
}

func init() { proto.RegisterFile("gogo_proto/response.proto", fileDescriptor_33d06547307c44d5) }

var fileDescriptor_33d06547307c44d5 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbf, 0x6a, 0xeb, 0x30,
	0x14, 0xc6, 0x2d, 0x3b, 0x7f, 0x9c, 0x93, 0x21, 0x20, 0x2e, 0x17, 0xdd, 0xc0, 0xf5, 0x15, 0xe1,
	0xfe, 0xf1, 0xe4, 0xc0, 0x9d, 0x4a, 0xba, 0x05, 0x5a, 0xc8, 0x92, 0x06, 0x87, 0xce, 0x25, 0x89,
	0x15, 0x63, 0xaa, 0x5a, 0x46, 0xb6, 0x0b, 0x79, 0x8b, 0x3e, 0x56, 0xc6, 0x8c, 0x9d, 0x4a, 0x49,
	0xa6, 0x0e, 0x7d, 0x82, 0x2e, 0xc5, 0xb2, 0x6c, 0x4c, 0xe8, 0xa6, 0xf3, 0x3b, 0xdf, 0xf9, 0x8e,
	0xf5, 0x59, 0xf0, 0x23, 0x14, 0xa1, 0xb8, 0x4b, 0xa4, 0xc8, 0xc4, 0x58, 0xb2, 0x34, 0x11, 0x71,
	0xca, 0x3c, 0x55, 0x0e, 0x69, 0x28, 0x44, 0xc8, 0xd9, 0x58, 0x55, 0xeb, 0x7c, 0x3b, 0x0e, 0x58,
	0xba, 0x91, 0x51, 0x92, 0x09, 0x59, 0x2a, 0x46, 0xef, 0x26, 0x0c, 0x16, 0x52, 0x04, 0xf9, 0x26,
	0xf3, 0xf5, 0x2c, 0x1e, 0x41, 0x4f, 0xa3, 0x59, 0x40, 0x10, 0x35, 0x5d, 0x6b, 0xda, 0xda, 0xbf,
	0xfc, 0x32, 0xfc, 0x5e, 0x52, 0x61, 0xfc, 0x17, 0xfa, 0x95, 0x57, 0x24, 0x62, 0x62, 0x52, 0xe4,
	0xf6, 0x94, 0x0a, 0xf9, 0xcd, 0x06, 0x26, 0xd0, 0x8a, 0x57, 0x0f, 0x8c, 0x58, 0xd4, 0xd4, 0x02,
	0xc3, 0x57, 0x04, 0xff, 0x06, 0x88, 0xd2, 0x25, 0xe3, 0x7c, 0xb5, 0xe6, 0x8c, 0xb4, 0xa8, 0xe9,
	0xda, 0xba, 0xdf, 0xe0, 0xf8, 0x1f, 0x74, 0x53, 0xc6, 0x39, 0x93, 0x29, 0x69, 0x53, 0xcb, 0xed,
	0xff, 0xef, 0x7a, 0x4b, 0x55, 0x6b, 0x6d, 0xd5, 0xc5, 0xb7, 0x30, 0x28, 0x8f, 0x0b, 0x19, 0x6d,
	0xd8, 0x2c, 0xde, 0x0a, 0xd2, 0x51, 0x03, 0x7f, 0xbc, 0xb3, 0xfb, 0x69, 0x83, 0x5a, 0x77, 0x15,
	0x67, 0x72, 0xa7, 0xed, 0xce, 0x3d, 0x86, 0x73, 0xf8, 0xf6, 0x95, 0x1c, 0x7f, 0x07, 0xeb, 0x9e,
	0xed, 0x08, 0xaa, 0xef, 0x6d, 0xf8, 0x05, 0xc0, 0x43, 0x68, 0x3f, 0xae, 0x78, 0xce, 0x54, 0x22,
	0x6d, 0xdd, 0x29, 0xd1, 0xc4, 0xbc, 0x40, 0x23, 0x0e, 0x9d, 0xd2, 0x0f, 0x53, 0xb0, 0xcb, 0x65,
	0x67, 0x21, 0xd7, 0xb4, 0x48, 0xa8, 0x3c, 0xcf, 0x8b, 0x04, 0xcd, 0x46, 0x82, 0x0d, 0x5e, 0x6c,
	0x4c, 0x8a, 0x6f, 0x53, 0x11, 0xd7, 0x1b, 0x15, 0x9a, 0x5c, 0x82, 0x1d, 0xe7, 0x3a, 0xc9, 0x9f,
	0x5e, 0xf9, 0x18, 0xbc, 0xea, 0x31, 0x78, 0xd7, 0x11, 0xe3, 0xc1, 0x8d, 0xfa, 0x4f, 0x29, 0x79,
	0xfb, 0xb0, 0x28, 0x72, 0x6d, 0xbf, 0x1e, 0x98, 0x92, 0xfd, 0xd1, 0x41, 0x87, 0xa3, 0x83, 0x5e,
	0x8f, 0x0e, 0x7a, 0x3a, 0x39, 0xc6, 0xe1, 0xe4, 0x18, 0xcf, 0x27, 0xc7, 0xf8, 0x0c, 0x00, 0x00,
	0xff, 0xff, 0xbf, 0x2f, 0x5e, 0x52, 0x72, 0x02, 0x00, 0x00,
}

func (m *ProductResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProductResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerPriceInfo) > 0 {
		for k := range m.SellerPriceInfo {
			v := m.SellerPriceInfo[k]
			baseI := i
			i = encodeVarintResponse(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintResponse(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintResponse(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Sellers) > 0 {
		for iNdEx := len(m.Sellers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sellers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i--
	if m.IsSellable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintResponse(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintResponse(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintResponse(dAtA, i, uint64(m.ProductId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Seller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Seller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Seller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintResponse(dAtA, i, uint64(m.Price))
	i--
	dAtA[i] = 0x18
	i -= len(m.SellerName)
	copy(dAtA[i:], m.SellerName)
	i = encodeVarintResponse(dAtA, i, uint64(len(m.SellerName)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintResponse(dAtA, i, uint64(m.SellerId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProductResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovResponse(uint64(m.ProductId))
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovResponse(uint64(l))
	}
	l = len(m.Name)
	n += 1 + l + sovResponse(uint64(l))
	n += 2
	if len(m.Sellers) > 0 {
		for _, e := range m.Sellers {
			l = e.Size()
			n += 1 + l + sovResponse(uint64(l))
		}
	}
	if len(m.SellerPriceInfo) > 0 {
		for k, v := range m.SellerPriceInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovResponse(uint64(len(k))) + 1 + sovResponse(uint64(v))
			n += mapEntrySize + 1 + sovResponse(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Seller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovResponse(uint64(m.SellerId))
	l = len(m.SellerName)
	n += 1 + l + sovResponse(uint64(l))
	n += 1 + sovResponse(uint64(m.Price))
	return n
}

func sovResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResponse(x uint64) (n int) {
	return sovResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProductResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSellable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSellable = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sellers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sellers = append(m.Sellers, Seller{})
			if err := m.Sellers[len(m.Sellers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerPriceInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SellerPriceInfo == nil {
				m.SellerPriceInfo = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthResponse
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthResponse
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipResponse(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthResponse
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SellerPriceInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ProductId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("isSellable")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Seller) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Seller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Seller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			m.SellerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sellerId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sellerName")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("price")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResponse = fmt.Errorf("proto: unexpected end of group")
)
